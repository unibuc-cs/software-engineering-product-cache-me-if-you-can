@model Developer_Toolbox.Models.Badge



<div class="container py-5">
    @if (TempData.ContainsKey("message"))
    {
        <h4 class="@ViewBag.MessageType p-3 rounded-3 text-center mb-5">@ViewBag.Message</h4>
    }

    <h2 class="text-center">Add badge</h2>

    <div class="row">
        <div class="col-6 offset-3">
            <form class="d-flex flex-column gap-3 overflow-auto" method="post" enctype="multipart/form-data" action="/Badges/New">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div>
                    @Html.Label("Title", "Badge title")

                    @Html.TextBox("Title", null, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Title, "", new { @class = "text-danger" })
                </div>
                <div>
                    @Html.Label("Description", "Badge description")

                    @Html.TextArea("Description", null, new { @class = "form-control"})
                    @Html.ValidationMessage("Description", null, new { @class = "text-danger" })
                </div>
                <div>
                    <label for="file">Upload Image</label>
                    <input type="file" id="file" name="file" class="form-control" />
                    @Html.ValidationMessage("Image", null, new { @class = "text-danger" })
                </div>
                <div>
                    <label>Select activity</label>
                    @Html.DropDownListFor(m => m.TargetActivityId,
                    new SelectList(Model.TargetActivities, "Value", "Text"),
                    "Select activity", new { @id = "targetActivity", @class = "form-control"})

                    @Html.ValidationMessageFor(m => m.TargetActivityId, null, new { @class = "text-danger" })
                </div>
                <div class="noOfTimes">
                    @Html.Label("TargetNoOfTimes", "Number of times the activity must be completed")
                    @Html.Editor("TargetNoOfTimes", new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.TargetNoOfTimes, null, new { @class = "text-danger" })
                </div>

                <div class="optionalFields practiceRelated">
                    <label>Select targeted category (optional)</label>
                    @Html.DropDownListFor(m => m.TargetCategoryId,
                    new SelectList(Model.TargetCategories, "Value", "Text"),
                    "Select category", new { @class = "form-control" })
                </div>

                <div class="optionalFields practiceRelated">
                    @Html.Label("Select targeted level of difficulty (optional)")
                    @Html.DropDownListFor(
                    (badge => badge.TargetLevel),
                    (IEnumerable<SelectListItem>)ViewBag.LevelOfDifficulty,
                    "Select",
                    new { @class = "form-control" }
                    )
                </div>

                <div class="optionalFields questionRelated">
                    <label>Select targeted tags (optional)</label>
                    @Html.ListBoxFor(m => m.SelectedTagsIds,
                    new SelectList(Model.TargetTagsItems, "Value", "Text"),
                    new { @class = "form-control" })
                </div>

                <div class="optionalFields challengesRelated">
                    <label>Select targeted weekly challenges (optional)</label>
                    @Html.ListBoxFor(m => m.SelectedChallengesIds,
                    new SelectList(Model.WeeklyChallengesItems, "Value", "Text"),
                    new { @class = "form-control" })
                </div>

                <button class="btn btn-outline" style="background-color:#eee; color:black;" type="submit">Add badge</button>
            </form>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        $('#targetActivity').change(function () {

            var selectedActivityId = $(this).val();

            if (selectedActivityId !== '') {
           
                var allActivities = @Html.Raw(Json.Serialize(Model.AllTargetActivities)); 
                console.log("all ", allActivities)
                var selectedActivity = allActivities.find(act => act.id == selectedActivityId);
                console.log("selected ", selectedActivity)

                if (selectedActivity.isPracticeRelated == null) {
                    $('.optionalFields').hide();
                    $('.noOfTimes').show();
                } else {
                    if (selectedActivity.isPracticeRelated) {
                        if (selectedActivity.id == 5) {
                            $('.challengesRelated').show();
                            $('.practiceRelated').hide();
                            $('.noOfTimes').hide();
                        } else {
                            $('.practiceRelated').show();
                            $('.noOfTimes').show();
                            $('.challengesRelated').hide();
                        }
                        $('.questionRelated').hide();
                    } else {
                        $('.practiceRelated').hide();
                        $('.challengesRelated').hide();
                        $('.questionRelated').show();
                        $('.noOfTimes').show();
                    }
                }
            } else {
                $('.optionalFields').hide();
                $('.noOfTimes').show();
            }
        });

        // Initially hide the additional fields
        $('.optionalFields').hide();
        $('.noOfTimes').show();
    });
</script>
